
name: Test Summary Comment
on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

permissions:
  issues: write
  pull-requests: write

jobs:
  post-summary:
    name: Post Test Summary
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    
    steps:
      - name: Download artifacts
        id: download
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.name,
              run_id: context.payload.workflow_run.id,
            });
            
            let hasErrors = false;
            for (const artifact of artifacts.data.artifacts) {
              try {
                console.log(`Processing artifact: ${artifact.name}`);
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.name,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });
                
                require('fs').writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
                await exec.exec('unzip', [`${artifact.name}.zip`, '-d', artifact.name]);
              } catch (error) {
                console.error(`Error processing artifact ${artifact.name}:`, error);
                hasErrors = true;
              }
            }
            
            return { hasErrors };

      - name: Generate detailed summary
        if: success()
        id: generate-summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            function formatTestResults(results) {
              const stats = {
                passed: results.numPassedTests || 0,
                failed: results.numFailedTests || 0,
                skipped: results.numPendingTests || 0,
                total: results.numTotalTests || 0,
                duration: results.testResults?.[0]?.perfStats?.duration || 0
              };
              
              return `
                - ‚úÖ Passed: ${stats.passed}
                - ‚ùå Failed: ${stats.failed}
                - ‚ö†Ô∏è Skipped: ${stats.skipped}
                - üìä Total: ${stats.total}
                - ‚è±Ô∏è Duration: ${(stats.duration / 1000).toFixed(2)}s
              `;
            }
            
            let summary = `## üß™ Test Results Summary\n\n`;
            summary += `### Status: ${context.payload.workflow_run.conclusion === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n\n`;
            
            // Process results for each Node version
            for (const version of ['18.x', '20.x', '22.x']) {
              summary += `### Node.js ${version}\n`;
              const resultsPath = `test-results-${version}/test-results-${version}.json`;
              
              try {
                if (fs.existsSync(resultsPath)) {
                  const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                  summary += formatTestResults(results);
                } else {
                  summary += `‚ùå No test results found\n`;
                }
              } catch (error) {
                summary += `‚ö†Ô∏è Error processing results: ${error.message}\n`;
              }
              
              summary += '\n';
            }
            
            // Add workflow run details
            summary += `\n### Workflow Details\n`;
            summary += `- Run ID: ${context.payload.workflow_run.id}\n`;
            summary += `- Triggered by: ${context.payload.workflow_run.event}\n`;
            summary += `- Started at: ${new Date(context.payload.workflow_run.created_at).toUTCString()}\n`;
            
            return summary;

      - name: Post comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${steps.generate-summary.outputs.result}\n\n<details>
            <summary>‚ÑπÔ∏è About this test summary</summary>
            
            This comment was automatically generated by GitHub Actions to provide visibility into test results.
            - If you see any issues, please check the workflow logs for more details.
            - Test results are kept for 7 days.
            </details>`;
            
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              console.log('No pull request found for this workflow run');
              return;
            }
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: pr.number,
                body: summary
              });
              
              console.log('Successfully posted test summary comment');
            } catch (error) {
              console.error('Error posting comment:', error);
              throw error;
            }

      - name: Handle errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              console.log('No pull request found for this workflow run');
              return;
            }
            
            const errorMessage = `## ‚ùå Test Summary Generation Failed
            
            There was an error generating or posting the test summary.
            Please check the [workflow logs](${context.payload.workflow_run.html_url}) for more details.
            
            This is likely a temporary issue. You can:
            1. Check the workflow logs for specific errors
            2. Re-run the workflow
            3. Contact the repository maintainers if the issue persists
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: pr.number,
              body: errorMessage
            });

